{"entries":[{"title":"Basic HTTP Auth with user_key","url":"/nginx/lua/authentication/2014/08/11/ExtractingBasicAuthtoken/","date":"2014-08-11 00:00:00 +0200","categories":["nginx","lua","authentication"],"body":"Basic HTTP Auth with user_key Author: Victor Delgado Version: 1.0 Language: Lua Description: First of all, some of the money will go directly to the speakers to compensate their costs to come to Barcelona and give some great talks. If that's not convincing enough, we'll serve you refreshments, have two coffee breaks and a lunch break. And we're not talking conference food, but a Mediterranean-style menu, tapas, sandwiches and other snacks prepared by awesome local chefs. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 --[[ Authorization logic ]] -- function get_auth_params ( where , method ) local params = {} if where == \" headers\" then params = ngx . req . get_headers () elseif where == \" basicauth\" then params = ngx . req . get_headers () if params [ \" Authorization\" ] then local m = ngx . re . match ( params [ \" Authorization\" ], \" Basic \\\\ s(.+)\" ) if m params then . user_key = m [ 1 ] end end elseif method == \" GET\" then params = ngx . req . get_uri_args () else ngx . req . read_body () params = ngx . req . get_post_args () end return first_values ( params ) end /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */ var disqus_shortname = 'testandrzej'; // required: replace example with your forum shortname /* * * DON'T EDIT BELOW THIS LINE * * */ (function() { var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true; dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js'; (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq); })(); Please enable JavaScript to view the comments powered by Disqus. comments powered by Disqus "},{"title":"Error 404 and report if app plan doesn't match","url":"/nginx/lua/reporting/2014/08/14/Error404andReportIfAppPlanNoMatch/","date":"2014-08-14 00:00:00 +0200","categories":["nginx","lua","reporting"],"body":"Error 404 and report if app plan doesn't match Author: Victor Delgado Version: 1.0 Language: Lua&Nginx Config Description: First of all, some of the money will go directly to the speakers to compensate their costs to come to Barcelona and give some great talks. If that's not convincing enough, we'll serve you refreshments, have two coffee breaks and a lunch break. And we're not talking conference food, but a Mediterranean-style menu, tapas, sandwiches and other snacks prepared by awesome local chefs. nginx.conf 1 location = /threescale_report { 2 internal ; 3 set $provider_key \"PROVIDERKEY\" ; 4 5 proxy_pass http://threescale_backend/transactions.xml ; 6 proxy_set_header Host \"su1.3scale.net\" ; 7 } nginx.lua 1 -------------------------------------- 2 -- authrep --------------------------- 3 -------------------------------------- 4 function authrep ( params , service ) 5 ngx . var . cached_key = ngx . var . cached_key .. \" :\" .. ngx . var . usage 6 local api_keys = ngx . shared . api_keys 7 local is_known = api_keys : get ( ngx . var . cached_key ) 8 9 if is_known ~= 200 then 10 local res = ngx . location . capture ( \" /threescale_authrep\" , { share_all_vars = true }) 11 12 -- IN HERE YOU DEFINE THE ERROR IF CREDENTIALS ARE PASSED, BUT THEY ARE NOT VALID 13 if res . status ~= 200 then 14 -- remove the key, if it's not 200 let's go the slow route, to 3scale's backend 15 api_keys : delete ( ngx . var . cached_key ) 16 ngx . status = res . status 17 ngx . header . content_type = \" application/json\" 18 error_authorization_failed ( service ) 19 else 20 -- check for application plan in authrep response 21 local qa_plan = ngx . re . match ( res . body , [=[<plan>.+QA]=] ) 22 23 if not qa_plan then 24 -- if application plan is not \"Sandbox\" report 25 -- to 3scale and return 404 error to the client 26 local transaction = \" transactions[0][app_id]=\" .. params . app_id .. 27 \" &transactions[0][usage][hits]=1\" 28 29 local report_body = \" provider_key=\" .. ngx . var . provider_key .. 30 \" &service_id=\" .. ngx . var . service_id .. 31 \" &transactions=\" .. transaction 32 33 ngx . location . capture ( \" /threescale_report\" , { 34 method = ngx . HTTP_POST , 35 body = report_body , 36 share_all_vars = true 37 }) 38 error_no_match ( service ) 39 end 40 41 api_keys : set ( ngx . var . cached_key , 200 ) 42 end 43 ngx . var . cached_key = nil 44 end 45 end"},{"title":"Openresty init.d script","url":"/nginx/2014/08/18/OpenrestyInitDScript/","date":"2014-08-18 00:00:00 +0200","categories":["nginx"],"body":"Openresty init.d script Author: Victor Delgado Version: 1.0 Language: init.d Description: First of all, some of the money will go directly to the speakers to compensate their costs to come to Barcelona and give some great talks. If that's not convincing enough, we'll serve you refreshments, have two coffee breaks and a lunch break. And we're not talking conference food, but a Mediterranean-style menu, tapas, sandwiches and other snacks prepared by awesome local chefs. 1 #!/bin/sh 2 # 3 # chkconfig: 2345 55 25 4 # Description: Nginx init.d script, put in /etc/init.d, chmod +x /etc/init.d/nginx 5 # For Debian, run: update-rc.d -f nginx defaults 6 # For CentOS, run: chkconfig --add nginx 7 # 8 ### BEGIN INIT INFO 9 # Provides: nginx 10 # Required-Start: $all 11 # Required-Stop: $all 12 # Default-Start: 2 3 4 5 13 # Default-Stop: 0 1 6 14 # Short-Description: nginx init.d script 15 # Description: OpenResty (aka. ngx_openresty) is a full-fledged web application server by bundling the standard Nginx core, lots of 3rd-party Nginx modules, as well as most of their external dependencies. 16 ### END INIT INFO 17 # 18 19 PATH = /usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin 20 DESC = \"Nginx Daemon\" 21 NAME = nginx 22 PREFIX = /usr/local/openresty/nginx 23 DAEMON = $PREFIX /sbin/ $NAME 24 CONF = $PREFIX /conf/ $NAME .conf 25 PID = $PREFIX /logs/ $NAME .pid 26 SCRIPT = /etc/init.d/ $NAME 27 28 if [ ! -x \"$DAEMON\" ] || [ ! -f \"$CONF\" ] ; then 29 echo -e \"\\033[33m $DAEMON has no permission to run. \\033[0m\" 30 echo -e \"\\033[33m Or $CONF doesn't exist. \\033[0m\" 31 sleep 1 32 exit 1 33 fi 34 35 do_start () { 36 if [ -f $PID ] ; then 37 echo -e \"\\033[33m $PID already exists. \\033[0m\" 38 echo -e \"\\033[33m $DESC is already running or crashed. \\033[0m\" 39 echo -e \"\\033[32m $DESC Reopening $CONF ... \\033[0m\" 40 $DAEMON -s reopen -c $CONF 41 sleep 1 42 echo -e \"\\033[36m $DESC reopened. \\033[0m\" 43 else 44 echo -e \"\\033[32m $DESC Starting $CONF ... \\033[0m\" 45 $DAEMON -c $CONF 46 sleep 1 47 echo -e \"\\033[36m $DESC started. \\033[0m\" 48 fi 49 } 50 51 do_stop () { 52 if [ ! -f $PID ] ; then 53 echo -e \"\\033[33m $PID doesn't exist. \\033[0m\" 54 echo -e \"\\033[33m $DESC isn't running. \\033[0m\" 55 else 56 echo -e \"\\033[32m $DESC Stopping $CONF ... \\033[0m\" 57 $DAEMON -s stop -c $CONF 58 sleep 1 59 echo -e \"\\033[36m $DESC stopped. \\033[0m\" 60 fi 61 } 62 63 do_reload () { 64 if [ ! -f $PID ] ; then 65 echo -e \"\\033[33m $PID doesn't exist. \\033[0m\" 66 echo -e \"\\033[33m $DESC isn't running. \\033[0m\" 67 echo -e \"\\033[32m $DESC Starting $CONF ... \\033[0m\" 68 $DAEMON -c $CONF 69 sleep 1 70 echo -e \"\\033[36m $DESC started. \\033[0m\" 71 else 72 echo -e \"\\033[32m $DESC Reloading $CONF ... \\033[0m\" 73 $DAEMON -s reload -c $CONF 74 sleep 1 75 echo -e \"\\033[36m $DESC reloaded. \\033[0m\" 76 fi 77 } 78 79 do_quit () { 80 if [ ! -f $PID ] ; then 81 echo -e \"\\033[33m $PID doesn't exist. \\033[0m\" 82 echo -e \"\\033[33m $DESC isn't running. \\033[0m\" 83 else 84 echo -e \"\\033[32m $DESC Quitting $CONF ... \\033[0m\" 85 $DAEMON -s quit -c $CONF 86 sleep 1 87 echo -e \"\\033[36m $DESC quitted. \\033[0m\" 88 fi 89 } 90 91 do_test () { 92 echo -e \"\\033[32m $DESC Testing $CONF ... \\033[0m\" 93 $DAEMON -t -c $CONF 94 } 95 96 do_info () { 97 $DAEMON -V 98 } 99 100 case \"$1\" in 101 start ) 102 do_start 103 ;; 104 stop ) 105 do_stop 106 ;; 107 reload ) 108 do_reload 109 ;; 110 restart ) 111 do_stop 112 do_start 113 ;; 114 quit ) 115 do_quit 116 ;; 117 test ) 118 do_test 119 ;; 120 info ) 121 do_info 122 ;; 123 * ) 124 echo \"Usage: $SCRIPT {start|stop|reload|restart|quit|test|info}\" 125 exit 2 126 ;; 127 esac 128 129 exit 0"},{"title":"Makefile for working with a remote Nginx","url":"/nginx/2014/08/19/MakefileForRemoteNginx/","date":"2014-08-19 00:00:00 +0200","categories":["nginx"],"body":"Makefile for working with a remote Nginx Author: Victor Delgado Version: 1.0 Language: Makefile Description: First of all, some of the money will go directly to the speakers to compensate their costs to come to Barcelona and give some great talks. If that's not convincing enough, we'll serve you refreshments, have two coffee breaks and a lunch break. And we're not talking conference food, but a Mediterranean-style menu, tapas, sandwiches and other snacks prepared by awesome local chefs. 1 #### SETTINGS 2 NGINXDIR = /usr/local/openresty/nginx/ 3 NGXCONF = nginx_dummycustomer.conf 4 USER = ubuntu 5 REMOTE = ec2-54-224-138-186.compute-1.amazonaws.com 6 REMOTEDIR = /home/ $( USER ) /dummycustomer/ 7 PRIVATEKEY = /Users/victordg/.ssh/aws/vdg-3scale.pem 8 #### 9 10 11 ngx_files = $( shell find . -name '*.lua' -o -name '*.conf' ) 12 ngx_bin = $( NGINXDIR ) sbin/nginx 13 ngx_conf_dir = $( NGINXDIR ) conf/ 14 tmp_dir = /home/ $( USER ) /ngx- $( shell date +%s ) 15 16 ifdef PRIVATEKEY 17 sshflags = -i $( PRIVATEKEY ) 18 endif 19 20 rsyncflags = -e \"ssh $(sshflags) $(PRIVATEKEY)\" --checksum -rlvzu --exclude \".*\" --exclude \"*.tgz*\" --exclude \"Makefile\" 21 22 23 all : 24 @echo \"use any of the targets : start , stop , pull , push , sync , deploy , watch \" 25 26 start : 27 @echo \"starting Nginx\" 28 ssh -i $( PRIVATEKEY ) $( USER ) @ $( REMOTE ) 'sudo $(ngx_bin) -c $(REMOTEDIR)$(NGXCONF)' 29 30 stop : 31 @echo \"stopping Nginx\" 32 ssh -i $( PRIVATEKEY ) $( USER ) @ $( REMOTE ) 'sudo $(ngx_bin) -c $(REMOTEDIR)$(NGXCONF) -s stop' 33 34 pull : 35 rsync --update $(rsyncflags) $(USER)@$(REMOTE) : $( REMOTEDIR ) / . 36 37 push : 38 rsync $(rsyncflags) . $(USER)@$(REMOTE) : $( REMOTEDIR ) / 39 40 # synchronize with remote 41 sync : pull push 42 43 # push changes to remote and start Nginx with the config file specified by NGXCONF 44 deploy : push 45 ssh $( sshflags ) $( PRIVATEKEY ) $( USER ) @ $( REMOTE ) 'sudo $(ngx_bin) -c $(REMOTEDIR)$(NGXCONF)' 46 47 # like deploy but when the remote Nginx is already running 48 redeploy : push 49 ssh $( sshflags ) $( PRIVATEKEY ) $( USER ) @ $( REMOTE ) 'sudo $(ngx_bin) -c $(REMOTEDIR)$(NGXCONF) -s reload' 50 51 # watch local directory and push changes 52 # requires watchman -- https://github.com/facebook/watchman 53 watch : 54 @echo \"Watching for changes in *.conf and *.lua files\" 55 watchman watch $( shell pwd ) -f --persistent --server-encoding = json 56 watchman -- trigger $( shell pwd ) remake '*.conf' '*.lua' -- make push 57 58 .PHONY : watch deploy redeploy start stop push pull sync"},{"title":"VCL report error code","url":"/varnish/reporting/2014/08/20/%20VCLReportErrorCode/","date":"2014-08-20 00:00:00 +0200","categories":["varnish","reporting"],"body":"VCL report error code Author: Victor Delgado Version: 1.0 Language: VCL Description: First of all, some of the money will go directly to the speakers to compensate their costs to come to Barcelona and give some great talks. If that's not convincing enough, we'll serve you refreshments, have two coffee breaks and a lunch break. And we're not talking conference food, but a Mediterranean-style menu, tapas, sandwiches and other snacks prepared by awesome local chefs. 1 sub vcl_fetch { 2 if ( req . http . X - 3 scale - authorization ) { 3 ## cache the authorization from 3scale 4 ## CHANGEME: below the TTL of the response of 3scale's backend 5 set beresp . ttl = 60 s ; 6 } 7 else { 8 if ( beresp . status != 200 ) { 9 std . log ( \"DEBUG: \" + beresp . status ); # beresp . status contains the response code from the backend 10 # here we can send a report call to 3scale to keep track 11 # of the number of error responses from the backend 12 set req . http . X - 3 scale - report = \"provider_key=\" + \"YOURPROVIDERKEY\" ; 13 set req . http . X - 3 scale - report = req . http . X - 3 scale - report + \"&transactions[0][app_id]=49399587\" ; 14 set req . http . X - 3 scale - report = req . http . X - 3 scale - report + req . http . X - 3 scale - app_id ; 15 set req . http . X - 3 scale - report = req . http . X - 3 scale - report + \"&transactions[0][usage][error_400]=1\" ; 16 if ( threescale . send_post_request_threaded ( \"su1.3scale.net\" , \"80\" , \"/transactions.xml\" , \"\" , req . http . X - 3 scale - report ) == 0 ){} 17 } 18 } 19 }"},{"title":"Redirect to external login","url":"/html/liquid/js/developerportal/2014/08/20/RedirectToExternalLogin/","date":"2014-08-20 00:00:00 +0200","categories":["html","liquid","js","developerportal"],"body":"Redirect to external login Author: Victor Delgado Version: 1.0 Language: HTML, Liquid, Javascript Description: First of all, some of the money will go directly to the speakers to compensate their costs to come to Barcelona and give some great talks. If that's not convincing enough, we'll serve you refreshments, have two coffee breaks and a lunch break. And we're not talking conference food, but a Mediterranean-style menu, tapas, sandwiches and other snacks prepared by awesome local chefs. 1 {% if current_user %} 2 <!-- page --> 3 {% else %} 4 <h2 class= \"section-header\" > Redirecting to login page... </h2> 5 <script type= \"text/javascript\" > 6 $ ( function ( window , document , $ , undefined ) { 7 function redirectToLogin () { 8 var script = document . createElement ( 'script' ); 9 script . type = 'text/javascript' ; 10 script . text = 'window.location.href=\"{{ bc_login_url }}?redirect_uri=/support\"' ; 11 document . body . appendChild ( script ); 12 } 13 setTimeout ( redirectToLogin , 1000 ); 14 }( window , document , jQuery )); 15 </script> 16 {% endif%}"},{"title":"Use pre-built cache in case 3scale cannot be reached","url":"/nginx/lua/caching/2014/08/20/UsePrebuiltCache/","date":"2014-08-20 00:00:00 +0200","categories":["nginx","lua","caching"],"body":"Use pre-built cache in case 3scale cannot be reached Author: Victor Delgado Version: 1.0 Language: Lua Description: First of all, some of the money will go directly to the speakers to compensate their costs to come to Barcelona and give some great talks. If that's not convincing enough, we'll serve you refreshments, have two coffee breaks and a lunch break. And we're not talking conference food, but a Mediterranean-style menu, tapas, sandwiches and other snacks prepared by awesome local chefs. 1 local whitelist = require \" whitelist\" 2 3 function authrep ( params , service ) 4 ngx . var . cached_key = ngx . var . cached_key .. \" :\" .. ngx . var . usage 5 local api_keys = ngx . shared . api_keys 6 local is_known = api_keys : get ( ngx . var . cached_key ) 7 8 if is_known ~= 200 then 9 local res = ngx . location . capture ( \" /threescale_authrep\" , { share_all_vars = true }) 10 11 if res . status == 504 then 12 -- 3scale could not be reached. Fall back to fixed cache 13 log ( \" DEBUG: TIMEOUT WHILE TRYING TO REACH 3SCALE\" ) 14 if whitelist [ params . app_id ] then 15 log ( \" DEBUG: application in cache\" ) 16 ngx . status = 200 17 return 18 else 19 log ( \" DEBUG: application not in cache\" ) 20 error_authorization_failed ( service ) 21 end 22 end 23 24 if res . status ~= 200 then 25 -- remove the key, if it's not 200 let's go the slow route, to 3scale's backend 26 api_keys : delete ( ngx . var . cached_key ) 27 ngx . status = res . status 28 ngx . header . content_type = \" application/json\" 29 error_authorization_failed ( service ) 30 else 31 api_keys : set ( ngx . var . cached_key , 200 ) 32 end 33 ngx . var . cached_key = nil 34 end 35 36 end"}]}